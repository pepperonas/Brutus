/*
 * Copyright (c) 2017 Martin Pfeffer
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'

@SuppressWarnings("GroovyUnusedDeclaration")
def getDate() {
    def date = new Date()
    def dayOnly = true;
    def formattedDate = date.format(dayOnly ? '_yyyy-MM-dd' : '_yyyy-MM-dd-hh-mm')
    return formattedDate
}

repositories {
    jcenter()
    maven { url "https://jitpack.io" }
}

android {
    signingConfigs {
        release
    }
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    useLibrary 'org.apache.http.legacy'
    defaultConfig {
        applicationId "io.celox.brutus"
        minSdkVersion 17
        targetSdkVersion 25
        versionCode 1
        versionName "0.0.1-alpha"
        project.ext.set("archivesBaseName", "brutus");
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        jackOptions {
//            additionalParameters("jack.incremental": "true")
            enabled true
        }
        vectorDrawables.useSupportLibrary = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        def fileName = outputFile.name.replace(".apk", ".apk");
                        fileName = fileName.replace("release", "release" + "-" + defaultConfig.versionName + getDate());
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
                }
            }
            signingConfig signingConfigs.release
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:multidex:1.0.1'
    testCompile 'junit:junit:4.12'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.github.pepperonas:andbasx:0.2.9'
    compile 'com.github.pepperonas:aesprefs:0.0.3'
    compile 'com.github.pepperonas:materialdialog:0.3.1'
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:recyclerview-v7:25.3.1'
    compile 'com.android.support:design:25.3.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile files('libs/commons-codec-1.9.jar')
}

def props = new Properties()

props.load(new FileInputStream(rootProject.file("release.properties")))
android.signingConfigs.release.storeFile rootProject.file(props.keyStore)
android.signingConfigs.release.storePassword props.keyStorePassword
android.signingConfigs.release.keyAlias props.keyAlias
android.signingConfigs.release.keyPassword props.keyAliasPassword
